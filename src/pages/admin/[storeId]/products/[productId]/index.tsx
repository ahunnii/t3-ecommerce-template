import type { GetServerSidePropsContext } from "next";
import { type FC } from "react";

import { api } from "~/utils/api";
import { authenticateSession } from "~/utils/auth";

import Head from "next/head";
import PageLoader from "~/components/ui/page-loader";
import AdminLayout from "~/layouts/AdminLayout";
import { ProductForm } from "~/modules/products/admin/product-form";
import { ViewProductAttributes } from "~/modules/products/admin/view-product-attributes";
import { ViewProductDetails } from "~/modules/products/admin/view-product-details";
import { ViewProductImages } from "~/modules/products/admin/view-product-images";
import { ViewProductsShipping } from "~/modules/products/admin/view-product-shipping";
import { ViewProductVariants } from "~/modules/products/admin/view-product-variants";

interface IProps {
  storeId: string;
  productId: string;
}

const ProductPage: FC<IProps> = ({ storeId, productId }) => {
  const { data: product, isLoading } = api.products.getProduct.useQuery({
    productId,
  });

  const { data: categories } = api.categories.getAllCategories.useQuery({
    storeId,
  });

  return (
    <>
      <Head>
        <title>{product?.name} | Admin Dashboard</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AdminLayout>
        {isLoading && <PageLoader />}
        {!product && <div>Product not found</div>}
        {product && categories && (
          <div className="flex h-full flex-col bg-gray-50/25 dark:bg-slate-900">
            <div className="flex-1 space-y-4 p-8 pt-6">
              <section className="flex w-full gap-4 max-lg:flex-col">
                <div className="flex w-full flex-col space-y-4 lg:w-8/12">
                  <ViewProductDetails {...product} />
                  <ViewProductVariants {...product} />
                  <ViewProductAttributes {...product} />
                  <ViewProductsShipping {...product} />
                </div>
                <div className="flex w-full flex-col lg:w-4/12">
                  <ViewProductImages {...product} />
                </div>
              </section>

              {/* <ProductForm
                categories={categories}
                initialData={product}
                attributes={product?.category.attributes ?? []}
              /> */}
            </div>
          </div>
        )}
      </AdminLayout>
    </>
  );
};

export async function getServerSideProps(ctx: GetServerSidePropsContext) {
  const store = await authenticateSession(ctx);

  if (!store) {
    return {
      redirect: {
        destination: `/admin`,
        permanent: false,
      },
    };
  }

  return {
    props: {
      storeId: ctx.query.storeId,
      productId: ctx.query.productId,
    },
  };
}

export default ProductPage;
