import type { GetServerSidePropsContext } from "next";
import type { FC } from "react";

import { api } from "~/utils/api";
import { authenticateSession } from "~/utils/auth";

import { CheckCircle } from "lucide-react";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import toast from "react-hot-toast";
import { OrderForm } from "~/components/admin/orders/order-form";
import { ShippingModal } from "~/components/admin/orders/shipping-modal";
import Currency from "~/components/core/ui/currency";
import { Button } from "~/components/ui/button";
import { Heading } from "~/components/ui/heading";
import { Input } from "~/components/ui/input";
import PageLoader from "~/components/ui/page-loader";
import { Separator } from "~/components/ui/separator";
import { env } from "~/env.mjs";
import AdminLayout from "~/layouts/AdminLayout";
import { ViewOrderCustomer } from "~/modules/orders/components/view-order-customer";
import { ViewOrderDetails } from "~/modules/orders/components/view-order-details";
import { ViewOrderFulfillment } from "~/modules/orders/components/view-order-fulfillment";
import { ViewOrderPayment } from "~/modules/orders/components/view-order-payment";
import { ViewOrderSummary } from "~/modules/orders/components/view-order-summary";
import { ViewOrderTimeline } from "~/modules/orders/components/view-order-timeline";
import { ordersRouter } from "~/server/api/routers/orders";
import { cn } from "~/utils/styles";

interface IProps {
  orderId: string;
}
const OrderPage: FC<IProps> = ({ orderId }) => {
  const { data: order, isLoading } = api.orders.getOrder.useQuery({
    orderId,
  });

  return (
    <>
      <Head>
        <title>View Order | Admin</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AdminLayout>
        {order && <ShippingModal data={order.id} />}
        {isLoading && <PageLoader />}

        {!order && <div>Order not found</div>}

        {order && (
          <div className="flex h-full w-full flex-col">
            <div className="flex-1 space-y-4 p-8 pt-6">
              <Heading
                title={`Order for ${
                  order?.name
                } on ${order?.createdAt.toDateString()}`}
                description={order?.id}
              />

              <section className="flex w-full gap-4 max-lg:flex-col">
                <div className="flex w-full flex-col space-y-4 lg:w-8/12">
                  <ViewOrderDetails {...order} />
                  <ViewOrderSummary {...order} />
                  <ViewOrderPayment {...order} />
                  <ViewOrderFulfillment {...order} />{" "}
                  <ViewOrderCustomer {...order} />
                </div>
                <div className="flex w-full flex-col lg:w-4/12">
                  <ViewOrderTimeline {...order} />
                </div>
              </section>
            </div>
          </div>
        )}
      </AdminLayout>
    </>
  );
};

export async function getServerSideProps(ctx: GetServerSidePropsContext) {
  const store = await authenticateSession(ctx);

  if (!store) {
    return {
      redirect: {
        destination: `/admin`,
        permanent: false,
      },
    };
  }

  return {
    props: {
      orderId: ctx.query.orderId,
    },
  };
}

export default OrderPage;
