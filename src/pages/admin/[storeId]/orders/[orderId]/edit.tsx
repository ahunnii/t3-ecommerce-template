import type { GetServerSidePropsContext } from "next";
import type { FC } from "react";

import { api } from "~/utils/api";
import { authenticateSession } from "~/utils/auth";

import Head from "next/head";
import PageLoader from "~/components/ui/page-loader";
import AdminLayout from "~/layouts/AdminLayout";
import { OrderForm } from "~/modules/orders/components/admin/order-form";

interface IProps {
  orderId: string;
}
const OrderPage: FC<IProps> = ({ orderId }) => {
  const { data: order } = api.orders.getOrder.useQuery({
    orderId,
  });

  return (
    <>
      <Head>
        <title>{order ? "Edit " : "Create "} Order | Store Admin</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AdminLayout>
        <div className="flex h-full flex-col">
          <div className="flex-1 space-y-4 p-8 pt-6">
            {typeof order === "undefined" && <PageLoader />}
            {typeof order === "object" && (
              <OrderForm initialData={order ?? null} />
            )}
          </div>
        </div>
      </AdminLayout>
    </>
  );
};

export async function getServerSideProps(ctx: GetServerSidePropsContext) {
  const store = await authenticateSession(ctx);

  if (!store) {
    return {
      redirect: {
        destination: `/admin`,
        permanent: false,
      },
    };
  }

  return {
    props: {
      orderId: ctx.query.orderId,
    },
  };
}

export default OrderPage;
