import { zodResolver } from "@hookform/resolvers/zod";
import Head from "next/head";
import Image from "next/image";
import { constants } from "os";
import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "react-hot-toast";
import * as z from "zod";
import { Button } from "~/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "~/components/ui/form";
import ImageUpload from "~/components/ui/image-upload";
import { Input } from "~/components/ui/input";
import { Textarea } from "~/components/ui/textarea";
import StorefrontLayout from "~/layouts/storefront-layout";
import { api } from "~/utils/api";
import Footer from "../components/footer";
import Navbar from "../modules/navigation/navbar";

const emailSchema = z.object({
  email: z.string().email(),
  name: z.string(),
  body: z.string(),
  images: z.object({ url: z.string() }).array().optional(),
});

type EmailFormValues = z.infer<typeof emailSchema>;

export const ContactUsPage = () => {
  const [loading, setLoading] = useState(false);

  const form = useForm<EmailFormValues>({
    resolver: zodResolver(emailSchema),
    defaultValues: {
      email: undefined,
      name: undefined,
      body: undefined,
      images: [],
    },
  });

  const { mutate: sendEmail } = api.email.sendEmailInquiry.useMutation({
    onSuccess: () => {
      toast.success("Email sent. We will get back to you shortly.");
    },
    onError: (error) => {
      toast.error("Something went wrong");
      console.error(error);
    },
    onMutate: () => setLoading(true),
    onSettled: () => {
      setLoading(false);
    },
  });

  const onSubmit = (values: EmailFormValues) => {
    sendEmail(values);
  };
  return (
    <>
      <Head>
        <title>Contact Us | Trend Anomaly</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <StorefrontLayout
        bodyStyle="items-center justify-center flex"
        mainStyle="bg-black/90"
        navStyles="bg-black border-b-black"
        NavBar={Navbar}
        Footer={Footer}
      >
        <div className="place-content: center flex  h-full flex-grow items-center justify-center ">
          <div className=" my-auto flex flex-col-reverse gap-y-8 space-y-10 px-4 py-10 max-md:items-center sm:px-6 md:flex-row lg:px-8 ">
            <div className="justify-left flex w-full flex-col gap-y-3 max-md:p-4 md:w-4/12">
              <>
                <h1 className="text-2xl text-white">
                  Have a custom order? Questions about a product? Hit us up!
                </h1>
                <Form {...form}>
                  <form
                    onSubmit={(event) =>
                      void form.handleSubmit(onSubmit)(event)
                    }
                    className="space-y-5 py-5"
                  >
                    <FormField
                      control={form.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem className="text-white/80 sm:col-span-3">
                          <FormLabel className="label">
                            <span className="label-text text-error">Email</span>
                          </FormLabel>
                          <FormControl>
                            <Input
                              disabled={loading}
                              placeholder="e.g. janedoe@example.com"
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />{" "}
                    <FormField
                      control={form.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem className="text-white/80 sm:col-span-3">
                          {" "}
                          <FormLabel className="label">
                            <span className="label-text text-error">Name</span>
                          </FormLabel>
                          <FormControl>
                            <Input
                              disabled={loading}
                              placeholder="e.g. Jane Doe"
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="body"
                      render={({ field }) => (
                        <FormItem className="text-white/80 sm:col-span-3">
                          {" "}
                          <FormLabel className="label">
                            <span className="label-text text-error">Body</span>
                          </FormLabel>
                          <FormControl>
                            <Textarea
                              disabled={loading}
                              placeholder="e.g. Hey! I had a question about a product."
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="images"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-white/80">
                            Images
                          </FormLabel>
                          <FormControl>
                            {/* <>
                    {!initialData?.images && <ImageLoader />} */}
                            <ImageUpload
                              value={field.value.map((image) => image.url)}
                              disabled={loading}
                              onChange={(url) =>
                                field.onChange([...field.value, { url }])
                              }
                              onRemove={(url) =>
                                field.onChange([
                                  ...field.value.filter(
                                    (current) => current.url !== url
                                  ),
                                ])
                              }
                            />
                            {/* </> */}
                          </FormControl>
                          <FormDescription>
                            If you have a custom order request, send us some
                            ideas that go with the request.
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />{" "}
                    <Button
                      type="submit"
                      className="ml-auto w-full bg-purple-600 hover:bg-purple-500"
                    >
                      Email Us
                    </Button>
                  </form>
                </Form>
              </>
            </div>

            <div className=" flex  w-full justify-end md:w-8/12  ">
              <Image
                src="/img/web_shopping.svg"
                alt="under development"
                width={500}
                height={500}
              />
            </div>
          </div>
        </div>
      </StorefrontLayout>{" "}
    </>
  );
};
