// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Address {
  id            String   @id @default(cuid())
  street        String
  additional    String?
  city          String
  state         String
  postal_code   String
  country       String?
  storeId       String?  @unique
  store         Store?   @relation( fields: [storeId], references: [id], onDelete: Cascade) 
  orderId       String?  @unique
  order         Order?   @relation( fields: [orderId], references: [id], onDelete: Cascade) 
  shippingLabelId String? @unique
  shippingLabel ShippingLabel? @relation( fields: [shippingLabelId], references: [id], onDelete: Cascade)

}
// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  orders        Order[]   @relation("UserToOrder")
  cart Cart[] @relation("UserToCart")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id                String          @id @default(cuid())
  name              String
  slug              String?         @unique
  userId            String
  businessAddress   String          @default("")
  customRequests    CustomOrderRequest[] @relation("StoreToCustomOrderRequest")
  address           Address ? 
  billboards        Billboard[]     @relation("StoreToBillboard")
  categories        Category[]      @relation("StoreToCategory")
  products          Product[]       @relation("StoreToProduct")
  orders            Order[]         @relation("StoreToOrder")
  gallery           GalleryImage[]  @relation("StoreToGalleryImage")
  blog              BlogPost[]      @relation("StoreToBlogPost")
  discounts             Discount[]          @relation("StoreToDiscount")
  // discounts         Discount[]      @relation("StoreToDiscount")

  hasFreeShipping   Boolean        @default(false)  
  minFreeShipping   Float?         @default(0)

  hasPickup         Boolean        @default(false)
  maxPickupDistance   Float?       @default(0)

  hasFlatRate      Boolean        @default(false)
  flatRateAmount    Float?        @default(0)

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  content           StoreContent?  @relation("StoreToContent") 
 socialMedia SocialMedia? @relation("StoreToSocialMedia")

  cart Cart[] @relation("StoreToCart")
  collections Collection[] @relation("StoreToCollection")
 
}

model StoreContent {
  id            String      @id @default(cuid())
  storeId       String      @unique
  store         Store?      @relation("StoreToContent", fields: [storeId], references: [id])
  aboutPage     String?      @db.Text
  heroImg       String?
}

model SocialMedia{
  id            String      @id @default(cuid())
  storeId       String      @unique
  store         Store?      @relation("StoreToSocialMedia", fields: [storeId], references: [id])
  facebook      String?
  instagram     String?
  twitter       String?
  tikTok        String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}
model Billboard {
  id            String     @id @default(cuid())
  storeId       String
  store         Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label         String
  description   String?
  imageUrl      String
  // categories    Category[]
  // collections   Collection[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([storeId])
}


model Category {
  id            String      @id @default(cuid())
  storeId       String     
  store         Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  name          String
  description   String? @db.Text

  attributes    Attribute[]
  products      Product[]   @relation("CategoryToProduct")
  collection    Collection? @relation("CategoryToCollection") 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])

}

model Collection {
  id      String @id @default(cuid())
  storeId String // Foreign Key to Store
  store   Store  @relation("StoreToCollection", fields: [storeId], references: [id])


  imageId     String?      @unique
  image       Image?       @relation(fields: [imageId], references: [id], onDelete: Cascade)

  categoryId  String?   @unique
  category    Category? @relation("CategoryToCollection", fields: [categoryId], references: [id])

  isFeatured  Boolean      @default(false)

  name    String  @unique
  description String? @db.Text
  slug    String? @unique

  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  discounts Discount[] @relation("DiscountToCollection")

  @@index([storeId])
 
  @@index([categoryId])
}
enum ShippingType  {
FLAT_RATE
FREE
LOCAL_PICKUP
VARIABLE 
}



model Product {
  id          String   @id @default(cuid())
  slug        String?   @unique

  storeId     String // Foreign Key to Store
  store       Store    @relation("StoreToProduct", fields: [storeId], references: [id])

  categoryId  String // Foreign Key to Category
  category    Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

  name        String
  price       Float    @default(0.00)

  briefDescription String?

  description String    @db.Text
  quantity    Int      @default(1)

  customOrder   CustomOrderRequest?
  // handle      String?  @unique @default(cuid())

  isFeatured  Boolean      @default(false)
  isArchived  Boolean      @default(false)

  featuredImage String?
  images      Image[] // Relation to Image model

  orderItems  OrderItem[] // Relation to Order model
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  variants    Variation[]
  collections Collection[]

  // handle       String? @unique

  cartItems CartItem[] // Relation to Order model
  weight    Float? @default(0) // in grams
  length    Float? @default(0) // in in
  width     Float? @default(0) // in in
  height    Float? @default(0) // in in


  shippingType ShippingType @default(FLAT_RATE)
  shippingCost Float? @default(0)

  estimatedCompletion Int @default(0)

  productType ProductType @default(PHYSICAL)

  materials ProductMaterial[] @relation("ProductMaterialToTag")
  tags Tag[] @relation("ProductToTag")

  discounts Discount[] @relation("DiscountToProduct")

  @@index([storeId])
  @@index([categoryId])
  @@index([slug])
}

enum CustomOrderStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum CustomOrderType {
  HAT
  SHIRT
  HOODIE
}
model CustomOrderRequest {
  id          String          @id @default(cuid())
  storeId     String    // Foreign Key to Store 
  store       Store    @relation("StoreToCustomOrderRequest", fields: [storeId], references: [id]) 
  type        CustomOrderType @default(SHIRT)       // Type of product being requested
  email       String
  name        String
  description String @db.Text
  notes       String? @db.Text
  images      Image[]     // Assuming you're storing image URLs or keys
  status      CustomOrderStatus @default(PENDING)       // ["pending", "accepted", "rejected"]
  price       Float?       // Price set by the admin upon acceptance
  invoiceId   String?      // Invoice ID for the custom order

  productId   String?   @unique
  product     Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)


  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([storeId])

}



model Tag {
  id          String   @id @default(cuid())
  productId   String? // Foreign Key to Store
  product     Product?   @relation("ProductToTag", fields: [productId], references: [id], onDelete: Cascade)

  blogPostId   String? // Foreign Key to Store
  blogPost     BlogPost?   @relation("BlogPostToTag", fields: [blogPostId], references: [id], onDelete: Cascade)
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([productId])
  @@index([blogPostId])
}

model ProductMaterial {
  id          String   @id @default(cuid())
  productId   String // Foreign Key to Store
  product     Product    @relation("ProductMaterialToTag", fields: [productId], references: [id], onDelete: Cascade)
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([productId])
}

enum ProductType {
  PHYSICAL
  DIGITAL
  SERVICE
}


model Order {
  id              String      @id @default(cuid())
  storeId         String      // Foreign Key to Store
  store           Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems      OrderItem[] // Relation to OrderItem model
  timeline        TimeLineEntry[]

  status          OrderStatus @default(PENDING)

  isPaid          Boolean     @default(false)
  isRefunded      Boolean     @default(false)
  isShipped       Boolean     @default(false)

  whenPaid        DateTime?
  total           Float       @default(0.00)
  taxes           Float?       @default(0.00)
  subtotal        Float       @default(0.00)
  shippingCost    Float?       @default(0.00)


  referenceId     String      @default("")
  paymentId       String?
  refundId        String? 


  name            String      @default("")
  email           String      @default("")
  phone           String      @default("")
  address         Address?
  // address         String      @default("")

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  shippingLabel   ShippingLabel?
  whenShipped     DateTime?


  userId          String?
  user            User?       @relation("UserToOrder", fields: [userId], references: [id])

  @@index([storeId])

  @@index([userId])
}

enum OrderStatus {
  NEW
  ABANDONED
  PENDING
  PAID
  SHIPPED
  REFUNDED
  PAYMENT_FAILED
}



model BlogPost {
  id          String    @id @default(cuid())
  storeId     String // Foreign Key to Product
  store       Store  @relation( "StoreToBlogPost", fields: [storeId], references: [id], onDelete: Cascade)
  title       String
  content     String @db.Text
  author      String?
  slug        String    @unique
  tags        Tag[]     @relation("BlogPostToTag")
  featuredImg String?   
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}



model TimeLineEntry {
  id              String      @id @default(cuid())
  title           String
  description     String? @db.Text
  type            TimeLineEntryType @default(ORDER_GENERIC)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  order           Order?      @relation( fields: [orderId], references: [id])
  orderId         String? 
  @@index([orderId])
}

enum TimeLineEntryType {
  ORDER_PLACED
  ORDER_PAID
  ORDER_SHIPPED
  ORDER_COMPLETED
  ORDER_CANCELLED
  ORDER_REFUNDED
  ORDER_RETURNED
  ORDER_NOTE
  ORDER_GENERIC
  PAYMENT_FAILED
  PAYMENT_SUCCESSFUL
  PAYMENT_PENDING
  PAYMENT_REFUNDED
  PAYMENT_INITIATED
  ORDER_PENDING
  ORDER_SUCCESSFUL
}


model ShippingLabel {
  id              String      @id @default(cuid())
  labelUrl        String?  @db.Text 
  trackingNumber  String?  @db.Text 
  trackingUrl     String?  @db.Text
  cost            String?      
  carrier         String?
  timeEstimate    String?
  expireAt        DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  address         Address?

  order           Order?      @relation( fields: [orderId], references: [id])
  orderId         String?     @unique
  @@index([orderId])
}
// Intermediary for a many-to-many relationship
model OrderItem {
  id        String     @id @default(cuid())
  orderId   String // Foreign Key to Order
  order     Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String // Foreign Key to Product
  product   Product    @relation(fields: [productId], references: [id])
  variantId String? // Foreign Key to Variant
  variant   Variation? @relation(fields: [variantId], references: [id])
  quantity  Int        @default(1)
  price     Float?      @default(0.00)
  discountId String? // Foreign Key to Discount
  discount Discount? @relation(fields: [discountId], references: [id])


  @@index([orderId])
  @@index([productId])
  @@index([variantId])
@@index([discountId])
}


model Image {
  id            String   @id @default(cuid())
  productId     String? // Foreign Key to Product
  product       Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customOrderId String?
  customOrder   CustomOrderRequest?  @relation(fields: [customOrderId], references: [id], onDelete: Cascade)
  

  collection   Collection?

  url       String // URL of the image
  alt       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([customOrderId])
  
}

model GalleryImage {
  id        String   @id @default(cuid())
  storeId   String // Foreign Key to Product
  store     Store  @relation( "StoreToGalleryImage", fields: [storeId], references: [id], onDelete: Cascade)
  title     String?
  url       String // URL of the image
  caption   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Attribute {
  id         String   @id @default(cuid())
  categoryId String // Foreign Key to Product
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name       String
  values     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  storeId    String  

  @@index([categoryId])
}

model Variation {
  id         String      @id @default(cuid())
  productId  String // Foreign Key to Product
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  names      String
  values     String
  orderItems OrderItem[] // Relation to Order model
  quantity   Int
  price      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  sku        String?      @unique
  imageUrl   String?

  cartItems CartItem[] // Relation to Order model

  @@index([productId])
}



model CartItem {
  id        String     @id @default(cuid())
  cartId    String // Foreign Key to Order
  cart      Cart       @relation(fields: [cartId], references: [id])
  productId String // Foreign Key to Product
  product   Product    @relation(fields: [productId], references: [id])
  variantId String? // Foreign Key to Variant
  variant   Variation? @relation(fields: [variantId], references: [id])
  quantity  Int        @default(1)

  @@index([cartId])
  @@index([productId])
  @@index([variantId])
}

model Cart {
  id        String     @id @default(cuid())
  storeId   String // Foreign Key to Store
  store     Store      @relation("StoreToCart", fields: [storeId], references: [id])
  userId    String
  user      User       @relation("UserToCart", fields: [userId], references: [id])
  cartItems CartItem[] // Relation to OrderItem model
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([storeId])
  @@index([userId])
}




model Discount {
  id        String     @id @default(cuid())
  storeId   String // Foreign Key to Store
  store     Store      @relation("StoreToDiscount", fields: [storeId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?

  startDate       DateTime
  endDate          DateTime?

  code            String @unique
  description     String?


  active          Boolean @default(true)

  value           Float @default(0)
  stackable       Boolean @default(false)

  valueType            DiscountValueType
  type                 DiscountType
  methodType           DiscountMethodType

  minValue             Float?
  maxValue             Float?

  products Product[] @relation("DiscountToProduct")
  collections Collection[] @relation("DiscountToCollection")
  orderItems OrderItem[] 

  @@index([storeId])

}

// Store has three sales going on:  new sale -- 10% off all products,  clearance sale -- 20% off pokemon, extra $5 off all orders over $50

// 25% off any item with code DOOKIE

//Gengar is apart of the 10% off site wide, and the 20% off pokemon sale.

//Page loads products and checks for any active sales, applies them to the products.






// Percentage, Fixed off total order / per item (limited to entire site / specific products/ collections)

enum DiscountValueType {
  PERCENTAGE
  FIXED
}

enum DiscountMethodType { 
  SALE
  COUPON
}

enum DiscountType {
  GLOBAL
  PER_PRODUCT
  PER_COLLECTION
  SHIPPING
  ORDER
}









enum Role {
  USER
  ADMIN
  BUSINESS_OWNER
}


